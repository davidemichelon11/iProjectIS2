swagger: '2.0'
info:
  version: '1.0'
  title: "iProjectIS2"
  description: Api's for the project.
host: iprojectis2.herokuapp.com
basePath: "/v1"
tags: 
- name: "Professor"
- name: "Student"
- name: "Test"
- name: "Exam"
- name: "Assignment"
- name: "Workgroup"
- name: "Workgroup's Post"
- name: "Book"
- name: "Course"
- name: "Delivery"
schemes:
- http
consumes:
- application/json
produces:
- application/json

#Global security for all resources's method
security: 
  - APIKeyHeader: []
  - APIKeyQueryParam: []
parameters:
  tokenHeaderParam:
    in: header
    name: x-access-token
    type: string
    required: true
    description: token
    x-example: G6943LMReKj_kqdAVrAiPbpRloAfE1fqp0eVAJ-IChQcV-kv3gW-gBAzWztBEdFY
    
paths:
  /professors:
    x-summary: /professors
    parameters: 
      - $ref: '#/parameters/tokenHeaderParam'
    get:
      tags: 
        - "Professor"
      summary: List of Professors
      produces:
      - "application/json"
      parameters:
      - in: "query"
        name: "idProfessor"
        type: "integer"
      - in: "query"
        name: "nameProfessor"
        type: "string"
      - in: "query"
        name: "emailProfessor"
        type: "string"

      responses:
        200:
          description: Successful Response
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Professors"
        401:
          $ref: "#/responses/UnauthorizedError"


    post:
      summary: Create Professor
      produces: 
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Professors object"
        required: true
        schema:
          $ref: "#/definitions/Professors" 
      responses:
        201:
          description: 'succesful'
        405:
          description: "Invalid input"

    put:
      summary: Update Professor
      produces: 
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Update Professor"
        required: true
        schema:
          $ref: "#/definitions/Professors"

      responses:
        201:
          description: 'valid'
        400:
          description: "Invalid test supplied"
        404:
          description: "Test not found"
  
  /professors/{idProfessor}:
    parameters:
      - $ref: '#/parameters/tokenHeaderParam'
      - name: idProfessor
        in: path
        description: ID to delete
        required: true
        type: string
        x-example: "912831293"
    delete:
      tags: 
        - "Professor"
      summary: Delete Professor By Id
      operationId: "DeleteProfessorById"
      produces: 
      - "application/json"
        
      responses:
        204: 
          description: 'successful'
        400:

          $ref: "#/responses/UnauthorizedError"
        404: 
          description: 'not found'


  /students:
    x-summary: /students
    parameters: 
      - $ref: '#/parameters/tokenHeaderParam'
    get:
      tags: 
        - "Student"
      summary: List of Students
      produces:
      - "application/json"
      parameters:
      - in: "query"
        name: "idStudent"
        type: "integer"
      - in: "query"
        name: "nameStudent"
        type: "string"
      - in: "query"
        name: "emailStudent"
        type: "string"
      
      responses:
        200:
          description: Successful Response
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Students"
        401: 
          $ref: "#/responses/UnauthorizedError"


    post:
      summary: Create Student
      produces: 
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Student object"
        required: true
        schema:
          $ref: "#/definitions/Students" 
      responses:
        201:
          description: 'succesful'
        405:
          description: "Invalid input"

    put:
      summary: Update Student
      produces: 
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Update Student"
        required: true
        schema:
          $ref: "#/definitions/Students"
      responses:
        201:
          description: 'valid'
        400:
          description: "Invalid test supplied"
        404:
          description: "not found"
    
  /students/{idStudent}:
    parameters:
      - $ref: '#/parameters/tokenHeaderParam'
      - name: idStudent
        in: path
        description: ID to delete
        required: true
        type: string
        x-example: "965841289"
    delete:
      tags: 
        - "Student"
      summary: Delete Student By Id
      operationId: "DeleteStudentById"
      produces: 
      - "application/json"
        
      responses:
        204: 
          description: 'successful'
        400:
          $ref: "#/responses/UnauthorizedError"
        404: 
          description: 'not found'


  /tests:
    x-summary: /tests
    parameters: 
      - $ref: '#/parameters/tokenHeaderParam'
    get:
      tags: 
        - "Test"
      summary: List of Tests
      produces:
      - "application/json"
      parameters:
      - in: "query"
        name: "idTest"
        type: "integer"
      - in: "query"
        name: "nameTest"
        type: "string"

      responses:
        200:
          description: Successful Response
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Tests"
        401:
          $ref: "#/responses/UnauthorizedError"
          

    post:
      summary: Create Test
      produces: 
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Test object that needs to be added"
        required: true
        schema:
          $ref: "#/definitions/Tests" 
      responses:
        201:
          description: 'succesful'
        405:
          description: "Invalid input"
           
 
    put:
      summary: Update Test
      produces: 
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Update Test"
        required: true
        schema:
          $ref: "#/definitions/Tests"

      responses:
        201:
          description: 'valid'
        400:
          description: "Invalid test supplied"
        404:
          description: "not found"
          examples:
            application/json: 
            
  /tests/{idTest}:
    parameters:
      - $ref: '#/parameters/tokenHeaderParam'
      - name: idTest
        in: path
        description: ID to delete
        required: true
        type: string
        x-example: "4742934726"
    delete:
      tags: 
        - "Test"
      summary: Delete Test By Id
      operationId: "DeleteTestById"
      produces: 
      - "application/json"
        
      responses:
        204: 
          description: 'successful'
        400:
          $ref: "#/responses/UnauthorizedError"
        404: 
          description: 'not found'

  /exams:
    x-summary: /exams
    parameters: 
      - $ref: '#/parameters/tokenHeaderParam'
    get:
      tags: 
        - "Exam"
      summary: List of Exams
      produces:
      - "application/json"
      parameters:
      - in: "query"
        name: "idExams"
        type: "integer"
      - in: "query"
        name: "nameExams"
        type: "string"
      - in: "query"
        name: "idTest"
        type: "integer"
      - in: "query"
        name: "idProfessor"
        type: "integer"
      - in: "query"
        name: "nameProfessor"
        type: "string"
      - in: "query"
        name: "idCourse"
        type: "integer"
      - in: "query"
        name: "nameCourse"
        type: "string"
      - in: "query"
        name: "exam-type"
        type: "string"
        enum:
        - "oral"
        - "write"
        - "practical"
      responses:
        200:
          description: 'Successful Response'
          schema: 
            type: "array"
            items:
              $ref: "#/definitions/Exams"
        401:
          $ref: "#/responses/UnauthorizedError"
    post:
      summary: Create Exam
      produces: 
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Exam object that needs to be added"
        schema:
          $ref: "#/definitions/Exams"
         
      responses:
        201:
          description: 'Succesful'
        405:
          description: "Invalid input"
            
    put:
      summary: Update Exams
      produces: 
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Update Exam"
        schema:
          $ref: "#/definitions/Exams"
      responses:
        201:
          description: 'Valid'
        400:
          description: "Invalid exam supplied"
        404:
          description: "Exam not found"
          
  /exams/{idExam}:
    parameters:
      - $ref: '#/parameters/tokenHeaderParam'
      - name: idExam
        in: path
        description: ID to delete
        required: true
        type: string
        x-example: "983248798112"
    delete:
      tags: 
        - "Exam"
      summary: Delete Exam By Id
      operationId: "DeleteExamById"
      produces: 
      - "application/json"
        
      responses:
        204: 
          description: 'successful'
        400:
          $ref: "#/responses/UnauthorizedError"
        404: 
          description: 'not found'


  /assignments:
    x-summary: /assignments
    parameters: 
      - $ref: '#/parameters/tokenHeaderParam'
    get:
      tags: 
        - "Assignment"
      summary: List of Assignments
      produces:
      - "application/json"
      parameters:
      - in: "query"
        name: "idAssignments"
        type: "integer"
      - in: "query"
        name: "nameAssignments"
        type: "string"
      - in: "query"
        name: "idTest"
        type: "integer"
      - in: "query"
        name: "idProfessor"
        type: "integer"
      - in: "query"
        name: "nameProfessor"
        type: "string"
      - in: "query"
        name: "idCourse"
        type: "integer"
      - in: "query"
        name: "nameCourse"
        type: "string"
      - in: "query"
        name: "obligatory"
        type: "boolean"

      responses:
        200:
          description: Successful Response
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Assignments"
        401: 
          $ref: "#/responses/UnauthorizedError"

    post:
      summary: Create Assignment
      produces: 
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Assignments object that needs to be added"
        required: true
        schema:
          $ref: "#/definitions/Assignments" 
          
      responses:
        201:
          description: 'succesful'
        405:
          description: "Invalid input"

    put:
      summary: Update Assignment
      produces: 
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Update Assignment"
        required: true
        schema:
          $ref: "#/definitions/Assignments"
         
      responses:
        201:
          description: 'valid'
        400:
          description: "Invalid assignment supplied"
        404:
          description: "Assignment not found"
          
  /assignments/{idAssignment}:
    parameters:
      - $ref: '#/parameters/tokenHeaderParam'
      - name: idAssignment
        in: path
        description: ID to delete
        required: true
        type: string
        x-example: "142782346"
    delete:
      tags: 
        - "Assignment"
      summary: Delete Assigment By Id
      operationId: "DeleteAssignmentById"
      produces: 
      - "application/json"

      responses:
        204: 
          description: 'successful'
        400:
          $ref: "#/responses/UnauthorizedError"
        404: 
          description: 'not found'

  /workgroups:
    x-summary: /workgroups
    parameters: 
      - $ref: '#/parameters/tokenHeaderParam'
    get:
      tags: 
        - "Workgroup"
      summary: List of Workgroups
      produces:
      - "application/json"
      parameters:
      - in: "query"
        name: "idWorkgroup"
        type: "integer"
      - in: "query"
        name: "nameWorkgroup"
        type: "string"
      responses:
        200:
          description: Successful Response
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Workgroups"
        401:
          $ref: "#/responses/UnauthorizedError"

    post:
      summary: Create Workgroup
      produces: 
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Workgroups object"
        required: true
        schema:
          $ref: "#/definitions/Workgroups" 
         
      responses:
        201:
          description: 'succesful'
        405:
          description: "Invalid input"

    put:
      summary: Update Workgroup
      produces: 
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Update Workgroup"
        required: true
        schema:
          $ref: "#/definitions/Workgroups"
         
      responses:
        201:
          description: 'valid'
        400:
          description: "Invalid"
        404:
          description: " not found"
          
  /workgroups/{idWorkgroup}:
    parameters:
      - $ref: '#/parameters/tokenHeaderParam'
      - name: idWorkgroup
        in: path
        description: ID to delete
        required: true
        type: string
        x-example: "57886973"
    delete:
      tags: 
        - "Workgroup"
      summary: Delete Workgroup By Id
      operationId: "DeleteWorkgroupById"
      produces: 
      - "application/json"
        
      responses:
        204: 
          description: 'successful'
        400:
          $ref: "#/responses/UnauthorizedError"
        404: 
          description: 'not found'

  /workgroups/idWorkgroup/posts:
    x-summary: /workgroups/{idWorkgroup}/posts
    parameters: 
      - $ref: '#/parameters/tokenHeaderParam'
    get:
      tags: 
        - "Workgroup's Post"
      summary: List of Posts in a Workgroup
      produces:
      - "application/json"
      parameters:
      - in: "query"
        name: "idWorkgroup"
        type: "integer"
      - in: "query"
        name: "nameWorkgroup"
        type: "string"
      - in: "query"
        name: "idPost"
        type: "integer"
 
      responses:
        200:
          description: Successful Response
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Workgroups|idWorkgoup|posts"
        401:
           $ref: "#/responses/UnauthorizedError"


    post:
      summary: Create Posts in Workgroup 
      produces: 
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Workgroups/object object"
        required: true
        schema:
          $ref: "#/definitions/Workgroups|idWorkgoup|posts" 
      
      responses:
        201:
          description: 'succesful'
        405:
          description: "Invalid input"

    put:
      summary: Update Post in Workgroup
      produces: 
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Workgroups/object object"
        required: true
        schema:
          $ref: "#/definitions/Workgroups|idWorkgoup|posts" 
         
      responses:
        201:
          description: 'valid'
        400:
          description: "Invalid"
        404:
          description: "not found" 
          
  /workgroups/posts/{idPost}:
    parameters:
      - $ref: '#/parameters/tokenHeaderParam'
      - name: idPost
        in: path
        description: ID to delete
        required: true
        type: string
        x-example: "3983094982"
    delete:
      tags: 
        - "Workgroup's Post"
      summary: Delete Workgroup's Post By Id
      operationId: "DeleteWorkgroup'sPostById"
      produces: 
      - "application/json"
        
      responses:
        204: 
          description: 'successful'
        400:
          $ref: "#/responses/UnauthorizedError"
        404: 
          description: 'not found'

  /books:
    x-summary: /books
    parameters:
      - $ref: '#/parameters/tokenHeaderParam'
    get:
      tags: 
        - "Book"
      summary: List of Books
      produces:
      - "application/json"
      parameters:
      - in: "query"
        name: "idBook"
        type: "integer"
      - in: "query"
        name: "title"
        type: "string"
      - in: "query"
        name: "idCourse"
        type: "integer"

      responses:
        200:
          description: Successful Response
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Books"
        401:
           $ref: "#/responses/UnauthorizedError"


    post:
      summary: Create Book
      produces: 
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Books object"
        required: true
        schema:
          $ref: "#/definitions/Books" 
      
         
      responses:
        201:
          description: 'succesful'
        405:
          description: "Invalid input"

    put:
      summary: Update Book
      produces: 
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Books object"
        required: true
        schema:
          $ref: "#/definitions/Books" 
          
      responses:
        201:
          description: 'valid'
        400:
          description: "Invalid "
        404:
          description: "not found"
          
  /books/{idBook}:
    parameters:
      - $ref: '#/parameters/tokenHeaderParam'
      - name: idBook
        in: path
        description: ID to delete
        required: true
        type: string
        x-example: "09568722384"
    delete:
      tags: 
        - "Book"
      summary: Delete Book By Id
      operationId: "DeleteBookById"
      produces: 
      - "application/json"
        
      responses:
        204: 
          description: 'successful'
        400:
          $ref: "#/responses/UnauthorizedError"

          
        404: 
          description: 'not found'

            
  /courses:
    x-summary: /courses
    parameters:
        - $ref: '#/parameters/tokenHeaderParam'
    get:
      tags: 
        - "Course"
      summary: List of Courses
      produces:
      - "application/json"
      parameters:
      - in: "query"
        name: "idCourse"
        type: "integer"
      - in: "query"
        name: "nameCourse"
        type: "string"
      - in: "query"
        name: "idProfessor"
        type: "integer"

      responses:
        200:
          description: Successful Response
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Courses"
        401:
           $ref: "#/responses/UnauthorizedError"

    post:
      summary: Create Course
      produces: 
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Course object that needs to be added"
        required: true
        schema:
          $ref: "#/definitions/Courses" 
         
      responses:
        201:
          description: 'successful'
        405:
          description: "Invalid input"

    put:
      summary: Update Course
      produces: 
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Update Course"
        required: true
        schema:
          $ref: "#/definitions/Courses"
         
      responses:
        201:
          description: 'valid'
        400:
          description: "Invalid course supplied"
        404:
          description: "Course not found"

  /courses/{idCourse}:
    parameters:
      - $ref: '#/parameters/tokenHeaderParam'
      - name: idCourse
        in: path
        description: ID to delete
        required: true
        type: string
        x-example: "092781356221"
    delete:
      tags: 
        - "Course"
      summary: Delete Course By Id
      operationId: "DeleteCourseById"
      produces: 
      - "application/json"
        
      responses:
        204: 
          description: 'successful'
        400:
          $ref: "#/responses/UnauthorizedError"
        404: 
          description: 'not found'

  /delivery:
    x-summary: /deliveries
    parameters:
        - $ref: '#/parameters/tokenHeaderParam'
    get:
      tags: 
        - "Delivery"
      summary: List of Delivery
      produces:
      - "application/json"
      parameters:
      - in: "query"
        name: "idDelivery"
        type: "integer"
      - in: "query"
        name: "idStudent"
        type: "integer"
      - in: "query"
        name: "idExam"
        type: "integer"
      responses:
        200:
          description: Successful Response
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Deliveries"
        401:
           $ref: "#/responses/UnauthorizedError"
    post:
      summary: Create Delivery
      produces: 
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Delivery object that needs to be added"
        required: true
        schema:
          $ref: "#/definitions/Deliveries" 
         
      responses:
        201:
          description: 'successful'
        405:
          description: "Invalid input"

definitions:

  Students:
    type: "object"
    properties:
      idStudent:
        type: "integer"
      nameStudent:
        type: "string"
      emailStudent: 
        type: "string"
        format: "email"
      password:
        type: "string"
    required:
      - idStudent
      - nameStudent
    example:
      idStudent: 753847
      nameStudent: "Alessandro"
      emailStudent: "alessandro.wioqe@sue.com"
      password: "Pkejfwie84"

  Professors:
    type: "object"
    properties:
      idProfessor:
        type: "integer"
      nameProfessor:
        type: "integer"
      emailProfessor:
        type: "string"
        format: "email"
      password:
        type: "string"
    required: 
      - idProfessor
      - nameProfessor 
    example: 
      idProfessor: 12273
      nameProfessor: "Matteo"
      emailProfessor: "matteo.ghgh@ueh.com"
      password: "SedqjER-2jhd"

  Tests: 
    type: "object"
    properties:
      idTest:
        type: "integer"
      nameTest: 
        type: "string"
      questions:
        type: "array"
        items: 
          type: "object"
          properties:
            idQuestion:
              type: "integer"
    required: 
      - idTest
      - nameTest
    example:
      idTest: 28939123
      nameTest: analisi
      questions: [918239,10293810,123810,12831]



  Exams: 
    type: "object"
    properties:
      idExam:
        type: "integer"
      nameExam: 
        type: "string"
      idProfessor:
        type: "integer"
      idCourse: 
        type: "integer"
      idTest:
        type: "integer"
      deadline:
        type: "string"
        format: "date-time"
      examType:
        type: "string"
        description: "Type of Exam"
        enum:
          - "oral"
          - "write"
          - "practical"
      description:
        type: "string"
    required:
      - idExam
      - nameExam
      - idProfessor
      - idCourse
      - idTest
      - deadline 
      - examType
      
    example:
      idExam: 9283091
      nameExam: "analisi 1"
      idProfessor: 1672488
      idCourse: 8823749
      idTest: 58379842
      deadline: "2018-12-06 12:34:21"
      examType: 'oral'
      description: "gfuytjftesythjhtfyghhkuiygfyrsawrsfdhfj"
      

  Assignments:
    type: "object"
    properties:
      idAssignment:
        type: "integer"
      nameAssignment: 
        type: "string"
      idTest:
        type: "integer"
      idProfessor:
        type: "integer"
      idCourse: 
        type: "integer"
      deadline:
        type: "string"
        format: "date-time"
      obligatory:
        type: "boolean"
        default: false
      descriprion:
        type: "string"
    required:
      - idAssignment
      - nameAssignment
      - idTest
      - idProfessor
      - idCourse
      - deadline
      - obligatory
    example: 
      idAssignment: 9283091
      nameAssignment: "assignment 1"
      idProfessor: 1672488
      idCourse: 8823749
      idTest: 58379842
      deadline: "2018-12-06 12:34:21"
      obligatory: true
      description: "wqhjfghjqwhfiuqwfio"

  Workgroups:
    type: "object"
    properties:
      idWorkgroup:
        type: "integer"
      nameWorkgroup: 
        type: "string"
      Members:
        type: "array"
        items: 
          type: "object"
          properties:
            idStudent:
              type: "integer"
    required:
      - idWorkgroup
      - nameWorkgroup
      - Members
    example:
      idWorkgroup: 2988497
      nameWorkgroup: "iProjectIS2"
      Members: array
            
  Workgroups|idWorkgoup|posts:
    type: "object"
    properties:
      idWorkgroup:
        type: "integer"
      idPost:
        type: "integer"
      Posts:
        type: "array"
        items: 
          type: "object"
          properties:
            idStudent:
              type: "integer"
            message: 
              type: "string"
    required:
      - idWorkgroup
      - idPost
    example: 
      idWorkgroup: 18381783
      idPost: 27378
      Posts: array
  
  Books:
    type: "object"
    properties:
      idBook:
        type: "integer"
      title: 
        type: "string"
      idStudent:
        type: "integer"
      idCourse: 
        type: "integer"
      sold:
        type: "boolean"
        default: false
      deadline: 
        type: "string"
        format: "date-time"
    required: 
      - idBook
      - idStudent
      - deadline 
      - sold
    example:
      idBook: 34290239
      title: "cavanda & Co."
      idStudent: 567320
      idCourse: 6948248
      sold: "false"
      deadline: "2018-12-13 14:07:56"
 
  Courses:
    type: "object"
    properties:
      idCourse:
        type: "integer"
      idProfessor:
        type: "integer"
      CFU: 
        type: "integer"
    required: 
      - idCourse
      - idProfessor
      - CFU
    example: 
      idCourse: 87498
      idProfessor: 3798218
      CFU: 12
  
  Deliveries:
    type: "object"
    properties:
      idDelivery:
        type: "integer"
      idStudent:
        type: "integer"
      idExam:
        type: "integer"
      answers:
        type: "array"
        items: 
          type: "string"
      timeDelivery:
        type: "string"
        format: "date-time"
        
    required:
      - idDelivery
      - idStudent
      - idExam
      - answers
      - timeDelivery
    
    example:
      idDelivery: 8749387
      idStudent: 3346896
      idExam: 78997667
      answer: array
      deadline: "2018-12-13 15:02:30"
      
responses:
  UnauthorizedError:
    description: API key is missing or invalid
    headers: 
      WWW_Authenticate:
        type: string
        
securityDefinitions:
   APIKeyHeader:
     type: apiKey
     in: header
     name: x-access-token
   APIKeyQueryParam:
     type: apiKey
     in: query
     name: token
  